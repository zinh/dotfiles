" curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
call plug#begin('~/.vim/plugged')
Plug 'scrooloose/nerdtree'
Plug 'altercation/vim-colors-solarized'
" Plug 'lifepillar/vim-solarized8'
Plug 'tpope/vim-fugitive'
" Plug 'pangloss/vim-javascript'
" Plug 'mxw/vim-jsx'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
" Plug 'wikitopian/hardmode'
" Plug 'hashivim/vim-terraform'
" Plug 'leafgarland/typescript-vim'
" Plug 'autozimu/LanguageClient-neovim', {'branch': 'next','do': 'bash install.sh',}
if has('nvim')
  Plug 'neovim/nvim-lspconfig'
endif
call plug#end()
set nocompatible
filetype off
map <C-p> :FZF<CR>
set encoding=utf-8
syntax on
filetype plugin indent on

" Auto complete
set omnifunc=syntaxcomplete#Complete
" set completefunc=LanguageClient#complete

set background=dark
" let g:solarized_visibility = "high"
" let g:solarized_contrast = "high"
" colorscheme solarized
" set termguicolors
colorscheme solarized
" let g:solarized_termcolors=256
" set t_Co=256
map <C-n> :NERDTreeFind<CR>
map <C-Left> :tabprevious<CR>
map <C-Left> :tabnext<CR>
set expandtab
set shiftwidth=2
" Old nerdtree auto-close command
" autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
set laststatus=2
set statusline=\ %{HasPaste()}%F%m%r%h\ %w\ \ CWD:\ %r%{getcwd()}%h\ \ \ Line:\ %l

set ai "Auto indent
set si "Smart indent
set wrap "Wrap lines

" Search relate
set hlsearch
set incsearch

" Configure backspace so it acts as it should act
set backspace=eol,start,indent
set whichwrap+=<,>,h,l

" Set wild menu. Demo: :spe<tab><tab>
set wildmenu
set wildmode=list:longest,full

" Moving around viewport
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" Remap VIM 0 to first non-blank character
map 0 ^

" Linebreak on 500 characters
set lbr
set tw=500

" With a map leader it's possible to do extra key combinations
let mapleader = ","
let g:mapleader = ","

" Useful mappings for managing tabs
map <leader>tn :tabnew<cr>
map <leader>to :tabonly<cr>
map <leader>tc :tabclose<cr>
map <leader>tm :tabmove
" map <leader>t<leader> :tabnext<cr>
map <leader><tab> :tabnext<cr>

" Set copy to system clipboard
map <leader>c "+y
map <leader>p "+p

" Disable highlight when <leader><cr> is pressed
map <silent> <leader><cr> :noh<cr>

" Enable/Disable line number
nmap <leader>n :set invnumber<CR>

" Set to auto read when a file is changed from the outside
set autoread

" Write with sudo
cmap w!! %!sudo tee > /dev/null %

" Set login shell
" set shell=zsh\ --interactive

" vim markdown plugin
" let g:vim_markdown_folding_disabled=1

function! HasPaste()
  if &paste
    return 'PASTE MODE '
  en
    return ''
endfunction

function! CmdLine(str)
    exe "menu Foo.Bar :" . a:str
    emenu Foo.Bar
    unmenu Foo
endfunction

" Vim Hard mode
" autocmd VimEnter,BufNewFile,BufReadPost * silent! call HardMode()
" nnoremap <leader>h <Esc>:call ToggleHardMode()<CR>

" config for vim-markdown
" disable spell-check
" let g:markdown_enable_spell_checking = 0

" Transparent background
hi Normal guibg=NONE ctermbg=NONE

" nvim lsp config
" for more information :help completeopt
set completeopt=menuone,noinsert,noselect

lua <<EOF
-- to config pylance
-- download(last worked version): curl -OJL https://ms-python.gallery.vsassets.io/_apis/public/gallery/publisher/ms-python/extension/vscode-pylance/2023.10.21/assetbyname/Microsoft.VisualStudio.Services.VSIXPackage
-- remove vscode check: sed -i "s/\(if(\!process\[[^] ]*\]\[[^] ]*\])return\!0x\)1/\10/" ./server.bundle.js
require('lspconfig')['pyright'].setup{
  on_attach = on_attach,
  cmd = {"node", "/home/vinh/Downloads/pylance/extension/dist/server.bundle.js", "--stdio"},
}

require('lspconfig')['clojure_lsp'].setup{
  on_attach = on_attach,
  cmd = {"/home/vinh/.bin/clojure-lsp"},
}
require'lspconfig'.pylsp.setup{
  on_attach = on_attach,
  cmd = {"/home/vinh/Projects/py3.10/bin/pylsp"},
}
-- To install tsserver: npm i typescript typescript-language-server
require('lspconfig')['tsserver'].setup{
  on_attach = on_attach,
  cmd = {"~/tsserver/node_modules/.bin/typescript-language-server", "--stdio", "--tsserver-path", "/Users/vinh/Workspace/Personal/tsserver"},
}

-- to install vue language server
-- npm i @vue/language-server
require('lspconfig')['volar'].setup{
init_options = { -- in case we have tsserverlibrary.js not found error
   typescript = {
     tsdk = "/Users/vinh/Workspace/berry/vuels/node_modules/typescript/lib"
     }
   },
on_attach = on_attach,
cmd = {"/Users/vinh/.anyenv/envs/nodenv/versions/20.15.0/bin/node", "/Users/vinh/.Programs/vuels/node_modules/.bin/vue-language-server", "--stdio"},
}

-- to add typescript support to Vue component
-- npm i @vue/typescript-plugin
-- and update tsserver config:
-- require('lspconfig')['tsserver'].setup{
--   init_options = {
--     plugins = {
--       {
--         name = "@vue/typescript-plugin",
--         location = "/Users/vinh/.Programs/vuels/node_modules/@vue/typescript-plugin",
--         languages = {"javascript", "typescript", "vue"},
--       },
--     },
--   },
--   filetypes = {
--     "javascript",
--     "typescript",
--     "vue",
--   },
--   on_attach = on_attach,
--   cmd = {"/Users/vinh/.anyenv/envs/nodenv/versions/20.15.0/bin/node", "/Users/vinh/.Programs/tsserver/node_modules/typescript-language-server/lib/cli.mjs", "--stdio"},
-- }

-- hls's version must matched Haskell version; otherwise, it won't work
require('lspconfig')['hls'].setup{
  on_attach = on_attach,
  cmd = {'~/haskell-language-server-macOS-9.0.2', '--lsp'},
}

vim.api.nvim_create_autocmd('LspAttach', {
  group = vim.api.nvim_create_augroup('UserLspConfig', {}),
  callback = function(ev)
  -- Enable completion triggered by <c-x><c-o>
  vim.bo[ev.buf].omnifunc = 'v:lua.vim.lsp.omnifunc'

  -- Buffer local mappings.
  -- See `:help vim.lsp.*` for documentation on any of the below functions
  local opts = { buffer = ev.buf }
  vim.keymap.set('n', 'gD', vim.lsp.buf.declaration, opts)
  vim.keymap.set('n', 'gd', vim.lsp.buf.definition, opts)
  vim.keymap.set('n', 'K', vim.lsp.buf.hover, opts)
  vim.keymap.set('n', '<leader>e', vim.diagnostic.open_float)
  -- vim.keymap.set('n', 'gi', vim.lsp.buf.implementation, opts)
  -- vim.keymap.set('n', '<C-k>', vim.lsp.buf.signature_help, opts)
  -- vim.keymap.set('n', '<space>wa', vim.lsp.buf.add_workspace_folder, opts)
  -- vim.keymap.set('n', '<space>wr', vim.lsp.buf.remove_workspace_folder, opts)
  -- vim.keymap.set('n', '<space>wl', function()
  --  print(vim.inspect(vim.lsp.buf.list_workspace_folders()))
  -- end, opts)
  -- vim.keymap.set('n', '<space>D', vim.lsp.buf.type_definition, opts)
  -- vim.keymap.set('n', '<space>rn', vim.lsp.buf.rename, opts)
  vim.keymap.set({ 'n', 'v' }, '<leader>ca', vim.lsp.buf.code_action, opts)
  -- vim.keymap.set('n', 'gr', vim.lsp.buf.references, opts)
  vim.keymap.set('n', '<leader>f', function()
  vim.lsp.buf.format { async = true }
  end, opts)
  end,
})
EOF
